/**
 * @file triangle.cpp
 * @brief Function definitions for the Triangle class.
 *
 * @author Eric Butler (edbutler)
 */

#include "scene/triangle.hpp"
#include "application/opengl.hpp"
#include "stdio.h"
#include "scene/scene.hpp"

namespace _462 {
real_t ALPHA;
real_t BETA;
real_t GAMMA; 

Vector3 camera_eye;
real_t  ray_time; 
Vector3 ray_direction;


Triangle::Triangle()
{
    vertices[0].material = 0;
    vertices[1].material = 0;
    vertices[2].material = 0;
}

Triangle::~Triangle() { }

void Triangle::render() const
{
    bool materials_nonnull = true;
    for ( int i = 0; i < 3; ++i )
        materials_nonnull = materials_nonnull && vertices[i].material;

    // this doesn't interpolate materials. Ah well.
    if ( materials_nonnull )
        vertices[0].material->set_gl_state();

    glBegin(GL_TRIANGLES);

    glNormal3dv( &vertices[0].normal.x );
    glTexCoord2dv( &vertices[0].tex_coord.x );
    glVertex3dv( &vertices[0].position.x );

    glNormal3dv( &vertices[1].normal.x );
    glTexCoord2dv( &vertices[1].tex_coord.x );
    glVertex3dv( &vertices[1].position.x);

    glNormal3dv( &vertices[2].normal.x );
    glTexCoord2dv( &vertices[2].tex_coord.x );
    glVertex3dv( &vertices[2].position.x);

    glEnd();

    if ( materials_nonnull )
        vertices[0].material->reset_gl_state();
}


Vector3 Triangle::transform_vector(const Vector3 &v) const {
        //create a transformation matrix for instancing 
        Matrix4 inv_trans;
        make_inverse_transformation_matrix(&inv_trans, position, orientation, scale);
        return inv_trans.transform_vector(v);
}
 
Vector3 Triangle::transform_point(const Vector3 &p) const {
        Matrix4 inv_trans;
        make_inverse_transformation_matrix(&inv_trans, position, orientation, scale);
        return inv_trans.transform_point(p);
}

 
/* static helper function for computing diffuse
 */
real_t max(real_t a, real_t b)
{
        if(a > b)
                return a;
        else
                return b;
}
 
/* computes the attenuation factor of a light source 
 * based on its distance from the surface point 
 * */
Color3 Triangle::attenuation(real_t &dist, const PointLight light, Vector3 &light_pos, Vector3 &surface_pos) const
{
        real_t constant = light.attenuation.constant;
        real_t lin = light.attenuation.linear;
        real_t quad = light.attenuation.quadratic;
        return light.color*(1.0/(constant + lin*dist + quad*pow(dist,2)));
}
real_t Triangle::is_shadow(const PointLight* light, const Vector3 &shadow_ray) const
{
	return 0.0;
}

real_t Triangle::shadow_intersection(const Geometry* shape, const Vector3 &shadow_dir, const Vector3 &surface_pos) const{

	Vector3 d  = transform_vector(shadow_dir);
	Vector3 e1 = transform_point(surface_pos);  
	Vector3 a = vertices[0].position; 
	Vector3 b = vertices[1].position;
	Vector3 c = vertices[2].position;

	// we construct each of the entries of the matrix
	// of a linear system 
	real_t A = a.x - b.x;
	real_t B = a.y - b.y;
	real_t C = a.z - b.z;
	
	real_t D = a.x - c.x; 
	real_t E = a.y - c.y; 
	real_t F = a.z - c.z; 
	
	real_t G = d.x; 
	real_t H = d.y;
	real_t I = d.z; 
	
	real_t J = a.x - e1.x;
	real_t K = a.y - e1.y; 
	real_t L = a.z - e1.z; 
 	// store results of arithemtic to save operations 
	real_t EIHF = E*I - H*F; 
	real_t GFDI = G*F - D*I; 
	real_t DHEG = D*H - E*G; 
	
	real_t AKJB = A*K - J*B;
	real_t JCAL = J*C - A*L; 
	real_t BLKC = B*L - K*C;    	

	// use cramers to solve 3 by 3 linear system 
	// results are given by the formulas below. 	
	real_t  M   =  A*(EIHF) + B*(GFDI) + C*(DHEG); 
	real_t beta = (J*(EIHF) + K*(GFDI) + L*(DHEG))/M;
	real_t gamma = (I*(AKJB) + H*(JCAL) + G*(BLKC))/M; 
	real_t	 t =-(F*(AKJB) + E*(JCAL) + D*(BLKC))/M; 
 	// conditions for returning true, note that T must be within the interval [0, infinity) 
	if((t >= 0.0) && (gamma >= 0.0) && (gamma <= 1.0) && (beta >= 0.0) && (beta <= 1.0 - gamma)){		
		return t;	
	}
	return -1.0;
}

/* computes the diffuse component by iterating through all lights within the scene
 * much the like sphere. 
 * note: only difference is the barycentric coordinates are an
 * additional weighing factor in the final output
 * */
Color3 Triangle:: compute_diffuse(const Scene* scene, Vector3 &normal,Vector3 &surface_pos)const{
 	Color3 total_diff = Color3(0,0,0);
        int num_lights = scene->num_lights();
	Geometry* const* sceneObjects = scene->get_geometries();
        const PointLight* lights = scene->get_lights();
        // iterate throught all lights in the scene
        for(int i=0;i<num_lights;i++){
	
		 real_t b_i = 1.0;
                 Vector3 light_pos = lights[i].position;
                 Vector3 light_vector = normalize(light_pos - surface_pos);
                 real_t dist = distance(light_pos,surface_pos);
 
                 Vector3 slope_pos = surface_pos + 0.000001*light_vector;
 
                 for(unsigned int j=0;j<scene->num_geometries(); j++){ 
                         real_t t = sceneObjects[j]->shadow_intersection(NULL, light_vector, slope_pos);
 
                         if(t != -1.0){
                                 Vector3 geo_surface = slope_pos + light_vector*t;
                                 real_t geo_dis = distance(geo_surface,slope_pos);
				 printf("geo_dis: %f dist: %f\n", geo_dis, dist);
                                 if(geo_dis < dist){
                                         b_i = 0.0;
                                         break;
                                 }
                         }
                 }
                 if(b_i == 1.0){
                         Color3 atten = attenuation(dist,lights[i], light_pos,surface_pos);
                         total_diff = total_diff + atten*max(dot(light_vector,normal),0);
                 }
        }     
	return total_diff;
}

/* based on the ambient, diffuse, and reflect/refraction 
 * and the barycentric coordinates of the point on the triangle
 * we compute the color at the given pixel coordinates
 * */
Color3 Triangle::color_at_pixel(const Scene* scene, int x, int y,const Vector3 &surface_pos) const {
	Color3 ambA = vertices[0].material->ambient;
	Color3 ambB = vertices[1].material->ambient;
	Color3 ambC = vertices[2].material->ambient;

	Color3 diffA = vertices[0].material->diffuse;
	Color3 diffB = vertices[1].material->diffuse;
	Color3 diffC = vertices[2].material->diffuse;

	Vector3 positionA = vertices[0].position;
	Vector3 positionB = vertices[1].position;
	Vector3 positionC = vertices[2].position;

	Vector3 normalA = vertices[0].normal;
	Vector3 normalB = vertices[1].normal;
	Vector3 normalC = vertices[2].normal;

//	Color3 diff_at_A = diffA*compute_diffuse(scene,normalA,positionA);	
//	Color3 diff_at_B = diffB*compute_diffuse(scene,normalB,positionB);	
//	Color3 diff_at_C = diffC*compute_diffuse(scene,normalC,positionC);	
	
	Color3 bary_amb  = ALPHA*ambA + BETA*ambB + GAMMA*ambC;
	Color3 bary_diff = ALPHA*diffA + BETA*diffB + GAMMA*diffC
 
	return scene->ambient_light*bary_amb + bary_diff*compute_diffuse(scene,normalA, surface_pos);
} 
// determines if our viewing ray intersects this given object
// abstractly speaking we construct the following system: 
// e + T(d) = a + BETA(b-a) + GAMMA(c-a)
// And solve for T, BETA, and GAMMA using cramer's rule  
real_t Triangle::is_intersecting(Vector3 &s, Vector3 &e, real_t* T) const
{
	Vector3 d  = transform_vector(s-e);
	Vector3 e1 = transform_point(e);  
	Vector3 a = vertices[0].position; 
	Vector3 b = vertices[1].position;
	Vector3 c = vertices[2].position;
        camera_eye = e1; 
	ray_direction = d; 	

	// we construct each of the entries of the matrix
	// of a linear system 
	real_t A = a.x - b.x;
	real_t B = a.y - b.y;
	real_t C = a.z - b.z;
	
	real_t D = a.x - c.x; 
	real_t E = a.y - c.y; 
	real_t F = a.z - c.z; 
	
	real_t G = d.x; 
	real_t H = d.y;
	real_t I = d.z; 
	
	real_t J = a.x - e1.x;
	real_t K = a.y - e1.y; 
	real_t L = a.z - e1.z; 
 	// store results of arithemtic to save operations 
	real_t EIHF = E*I - H*F; 
	real_t GFDI = G*F - D*I; 
	real_t DHEG = D*H - E*G; 
	
	real_t AKJB = A*K - J*B;
	real_t JCAL = J*C - A*L; 
	real_t BLKC = B*L - K*C;    	

	// use cramers to solve 3 by 3 linear system 
	// results are given by the formulas below. 	
	real_t  M   =  A*(EIHF) + B*(GFDI) + C*(DHEG); 
	real_t beta = (J*(EIHF) + K*(GFDI) + L*(DHEG))/M;
	real_t gamma = (I*(AKJB) + H*(JCAL) + G*(BLKC))/M; 
	real_t	 TIME =-(F*(AKJB) + E*(JCAL) + D*(BLKC))/M; 
 	// conditions for returning true, note that T must be within the interval [0, infinity) 
	if((TIME >= 0.0) && (gamma >= 0.0) && (gamma <= 1.0) && (beta >= 0.0) && (beta <= 1.0 - gamma)){		
		ray_time = TIME;
		real_t alpha = 1.0 - beta - gamma;
		// the intersection returns -1 if the time of intersection is 
		// in fact a minimal time 
		if(TIME < *T || *T == -1.0){
			ALPHA = alpha;
			BETA = beta; 
			GAMMA = gamma;
			*T = TIME;					
			return -1.0; 
		}	
	}
	return 0.0; 
}

} /* _462 */

